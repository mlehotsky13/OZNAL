#grain=unlist(sapply(wanted, FUN = function(x){"grain" %in% meta(x)[["topics_cat"]]})),
#trade=unlist(sapply(wanted, FUN = function(x){"trade" %in% meta(x)[["topics_cat"]]})),
#interest=unlist(sapply(wanted, FUN = function(x){"interest" %in% meta(x)[["topics_cat"]]})),
#wheat=unlist(sapply(wanted, FUN = function(x){"wheat" %in% meta(x)[["topics_cat"]]})),
#ship=unlist(sapply(wanted, FUN = function(x){"ship" %in% meta(x)[["topics_cat"]]})),
#corn=unlist(sapply(wanted, FUN = function(x){"corn" %in% meta(x)[["topics_cat"]]})),
train_test=(sapply(wanted, meta, "lewissplit")),
stringsAsFactors=F)
sourceData <- VectorSource(dataframe$text)
corpus <- Corpus(sourceData)
dtm <- DocumentTermMatrix(corpus)
weightedDtm <- weightTfIdf(dtm)
# remove sparse terms
dtm <- removeSparseTerms(dtm, 0.97)
weightedDtm <- removeSparseTerms(weightedDtm, 0.99)
# Document Term Matrix to dataframe conversion
dataframeDtm <- data.frame(as.matrix(dtm))
dataframeWeightedDtm <- data.frame(as.matrix(weightedDtm))
dataframeDtmTrain <- dataframeDtm[which(dataframe$train_test == "TRAIN"),]
dataframeDtmTest <- dataframeDtm[which(dataframe$train_test == "TEST"),]
dataframeWeightedDtmTrain <- dataframeWeightedDtm[which(dataframe$train_test == "TRAIN"),]
dataframeWeightedDtmTest <- dataframeWeightedDtm[which(dataframe$train_test == "TEST"),]
dataframeDtmTrain$earn <- dataframe$earn[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$earn <- dataframe$earn[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$earn <- dataframe$earn[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$earn <- dataframe$earn[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain <- dataframeWeightedDtmTrain[1:2000,]
dataframeWeightedDtmTest <- dataframeWeightedDtmTest[1:800,]
dataframeDtmTrain <- dataframeDtmTrain[1:200,]
dataframeDtmTest <- dataframeDtmTest[1:80,]
#KNN
ctrl <- trainControl(method="repeatedcv", number = 10, repeats = 3)
knnTf <- train(earn ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnPredict <- predict(knnTf, newdata = dataframeDtmTest)
knnTf
load("2.RData")
wantedTopics <- list("earn", "acq", "money-fx", "crude", "grain", "trade", "interest", "wheat", "ship", "corn")
wanted <- tm_filter(vcProcessed, FUN = function(x){length(meta(x)[["topics_cat"]]) > 0})
wanted <- tm_filter(wanted, FUN = function(x){all(as.list(meta(x)[["topics_cat"]]) %in% wantedTopics)})
wanted <- tm_filter(wanted, FUN = function(x){meta(x)[["lewissplit"]] %in% c("TRAIN", "TEST")})
dataframe <- data.frame(text=unlist(sapply(wanted, `[`, "content")),
earn=as.factor(unlist(sapply(wanted, FUN = function(x){("earn" %in% meta(x)[["topics_cat"]]) * 1}))),
acq=as.factor(unlist(sapply(wanted, FUN = function(x){("acq" %in% meta(x)[["topics_cat"]]) * 1}))),
#moneyfx=unlist(sapply(wanted, FUN = function(x){"money-fx" %in% meta(x)[["topics_cat"]]})),
#crude=unlist(sapply(wanted, FUN = function(x){"crude" %in% meta(x)[["topics_cat"]]})),
#grain=unlist(sapply(wanted, FUN = function(x){"grain" %in% meta(x)[["topics_cat"]]})),
#trade=unlist(sapply(wanted, FUN = function(x){"trade" %in% meta(x)[["topics_cat"]]})),
#interest=unlist(sapply(wanted, FUN = function(x){"interest" %in% meta(x)[["topics_cat"]]})),
#wheat=unlist(sapply(wanted, FUN = function(x){"wheat" %in% meta(x)[["topics_cat"]]})),
#ship=unlist(sapply(wanted, FUN = function(x){"ship" %in% meta(x)[["topics_cat"]]})),
#corn=unlist(sapply(wanted, FUN = function(x){"corn" %in% meta(x)[["topics_cat"]]})),
train_test=(sapply(wanted, meta, "lewissplit")),
stringsAsFactors=F)
sourceData <- VectorSource(dataframe$text)
corpus <- Corpus(sourceData)
dtm <- DocumentTermMatrix(corpus)
weightedDtm <- weightTfIdf(dtm)
# remove sparse terms
dtm <- removeSparseTerms(dtm, 0.97)
weightedDtm <- removeSparseTerms(weightedDtm, 0.99)
# Document Term Matrix to dataframe conversion
dataframeDtm <- data.frame(as.matrix(dtm))
dataframeWeightedDtm <- data.frame(as.matrix(weightedDtm))
dataframeDtmTrain <- dataframeDtm[which(dataframe$train_test == "TRAIN"),]
dataframeDtmTest <- dataframeDtm[which(dataframe$train_test == "TEST"),]
dataframeWeightedDtmTrain <- dataframeWeightedDtm[which(dataframe$train_test == "TRAIN"),]
dataframeWeightedDtmTest <- dataframeWeightedDtm[which(dataframe$train_test == "TEST"),]
dataframeDtmTrain$earn <- dataframe$earn[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$earn <- dataframe$earn[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$earn <- dataframe$earn[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$earn <- dataframe$earn[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$acq <- dataframe$acq[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$acq <- dataframe$acq[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$acq <- dataframe$acq[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$acq <- dataframe$acq[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain <- dataframeWeightedDtmTrain[1:2000,]
dataframeWeightedDtmTest <- dataframeWeightedDtmTest[1:800,]
dataframeDtmTrain <- dataframeDtmTrain[1:200,]
dataframeDtmTest <- dataframeDtmTest[1:80,]
head(dataframeWeightedDtmTrain)
knnTf <- train(c(earn, acq) ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTf <- train(earn, acq ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
help(train)
knnTf <- train(earn, acq, data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTf <- train(earn ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
#KNN
ctrl <- trainControl(method="repeatedcv", number = 10, repeats = 3)
knnTf <- train(earn ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTf <- train(earn, acq ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTf <- train(earn ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTf <- train(earn, data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTf <- train(earn ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTf <- train(earn ~ ., acq ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTf <- train(earn ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTf <- train(acq ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnPredict <- predict(knnTf, newdata = dataframeDtmTest)
knnTf
#KNN
ctrl <- trainControl(method="repeatedcv", number = 10, repeats = 3)
knnTf <- train(earn ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnPredict <- predict(knnTf, newdata = dataframeDtmTest)
knnTf
load("2.RData")
#KNN
ctrl <- trainControl(method="repeatedcv", number = 10, repeats = 3)
knnTf <- train(earn ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
wantedTopics <- list("earn", "acq", "money-fx", "crude", "grain", "trade", "interest", "wheat", "ship", "corn")
wanted <- tm_filter(vcProcessed, FUN = function(x){length(meta(x)[["topics_cat"]]) > 0})
wanted <- tm_filter(wanted, FUN = function(x){all(as.list(meta(x)[["topics_cat"]]) %in% wantedTopics)})
wanted <- tm_filter(wanted, FUN = function(x){meta(x)[["lewissplit"]] %in% c("TRAIN", "TEST")})
dataframe <- data.frame(text=unlist(sapply(wanted, `[`, "content")),
earn=as.factor(unlist(sapply(wanted, FUN = function(x){("earn" %in% meta(x)[["topics_cat"]]) * 1}))),
acq=as.factor(unlist(sapply(wanted, FUN = function(x){("acq" %in% meta(x)[["topics_cat"]]) * 1}))),
#moneyfx=unlist(sapply(wanted, FUN = function(x){"money-fx" %in% meta(x)[["topics_cat"]]})),
#crude=unlist(sapply(wanted, FUN = function(x){"crude" %in% meta(x)[["topics_cat"]]})),
#grain=unlist(sapply(wanted, FUN = function(x){"grain" %in% meta(x)[["topics_cat"]]})),
#trade=unlist(sapply(wanted, FUN = function(x){"trade" %in% meta(x)[["topics_cat"]]})),
#interest=unlist(sapply(wanted, FUN = function(x){"interest" %in% meta(x)[["topics_cat"]]})),
#wheat=unlist(sapply(wanted, FUN = function(x){"wheat" %in% meta(x)[["topics_cat"]]})),
#ship=unlist(sapply(wanted, FUN = function(x){"ship" %in% meta(x)[["topics_cat"]]})),
#corn=unlist(sapply(wanted, FUN = function(x){"corn" %in% meta(x)[["topics_cat"]]})),
train_test=(sapply(wanted, meta, "lewissplit")),
stringsAsFactors=F)
sourceData <- VectorSource(dataframe$text)
corpus <- Corpus(sourceData)
dtm <- DocumentTermMatrix(corpus)
weightedDtm <- weightTfIdf(dtm)
# remove sparse terms
dtm <- removeSparseTerms(dtm, 0.97)
weightedDtm <- removeSparseTerms(weightedDtm, 0.99)
# Document Term Matrix to dataframe conversion
dataframeDtm <- data.frame(as.matrix(dtm))
dataframeWeightedDtm <- data.frame(as.matrix(weightedDtm))
dataframeDtmTrain <- dataframeDtm[which(dataframe$train_test == "TRAIN"),]
dataframeDtmTest <- dataframeDtm[which(dataframe$train_test == "TEST"),]
dataframeWeightedDtmTrain <- dataframeWeightedDtm[which(dataframe$train_test == "TRAIN"),]
dataframeWeightedDtmTest <- dataframeWeightedDtm[which(dataframe$train_test == "TEST"),]
save.image("~/Desktop/SKOLA/Ing/2. semester/Objavovanie znalosti/Projekt/R/nove.RData")
dataframeDtmTrain$earn <- dataframe$earn[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$earn <- dataframe$earn[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$earn <- dataframe$earn[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$earn <- dataframe$earn[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$acq <- dataframe$acq[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$acq <- dataframe$acq[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$acq <- dataframe$acq[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$acq <- dataframe$acq[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain <- dataframeWeightedDtmTrain[1:2000,]
dataframeWeightedDtmTest <- dataframeWeightedDtmTest[1:800,]
dataframeDtmTrain <- dataframeDtmTrain[1:200,]
dataframeDtmTest <- dataframeDtmTest[1:80,]
#KNN
ctrl <- trainControl(method="repeatedcv", number = 10, repeats = 3)
knnTf <- train(earn ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnPredict <- predict(knnTf, newdata = dataframeDtmTest)
knnTf
#KNN
ctrl <- trainControl(method="repeatedcv", number = 10, repeats = 3)
knnTf <- train(earn ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTf <- train(acq ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnPredict <- predict(knnTf, newdata = dataframeDtmTest)
knnTf
#KNN
ctrl <- trainControl(method="repeatedcv", number = 10, repeats = 3)
knnTf <- train(acq ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTf
load("nove.RData")
dataframeDtmTrain$earn <- dataframe$earn[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$earn <- dataframe$earn[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$earn <- dataframe$earn[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$earn <- dataframe$earn[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$acq <- dataframe$acq[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$acq <- dataframe$acq[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$acq <- dataframe$acq[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$acq <- dataframe$acq[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain <- dataframeWeightedDtmTrain[1:2000,]
dataframeWeightedDtmTest <- dataframeWeightedDtmTest[1:800,]
dataframeDtmTrain <- dataframeDtmTrain[1:200,]
dataframeDtmTest <- dataframeDtmTest[1:80,]
#KNN
ctrl <- trainControl(method="repeatedcv", number = 10, repeats = 3)
knnTfEarn <- train(earn ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTfAcq <- train(acq ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnPredictEarn <- predict(knnTf, newdata = dataframeDtmTest)
knnPredictEarn <- predict(knnTfEarn, newdata = dataframeDtmTest)
knnPredictAcq <- predict(knnTfAcq, newdata = dataframeDtmTest)
knnTf <- cbind(knnPredictEarn, knnPredictAcq)
knnTf
knnTfidf
knnPredictEarn
#KNN
ctrl <- trainControl(method="repeatedcv", number = 10, repeats = 3)
knnTfEarn <- train(earn ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnPredictEarn <- predict(knnTfEarn, newdata = dataframeDtmTest)
knnTfEarn
knnTf <- cbind(knnTfEarn, knnTfAcq)
knnTf
knnTf <- cbind(knnPredictEarn, knnPredictAcq)
knnTf
knnTf
help("predict")
knnPredictEarn <- predict(knnTfEarn, newdata = dataframeDtmTest)
knnPredictEarn
knnPredictAcq
knnTf <- cbind(knnPredictEarn, knnPredictAcq)
knnTf
knnTfEarn
source('~/Desktop/SKOLA/Ing/2. semester/Objavovanie znalosti/Projekt/R/testing.R')
load("nove.RData")
load("3.RData")
load("2.RData")
wantedTopics <- list("earn", "acq", "money-fx", "crude", "grain", "trade", "interest", "wheat", "ship", "corn")
wanted <- tm_filter(vcProcessed, FUN = function(x){length(meta(x)[["topics_cat"]]) > 0})
wanted <- tm_filter(wanted, FUN = function(x){all(as.list(meta(x)[["topics_cat"]]) %in% wantedTopics)})
wanted <- tm_filter(wanted, FUN = function(x){meta(x)[["lewissplit"]] %in% c("TRAIN", "TEST")})
library(tm)
library(caret)
library(ggplot2)
wantedTopics <- list("earn", "acq", "money-fx", "crude", "grain", "trade", "interest", "wheat", "ship", "corn")
wanted <- tm_filter(vcProcessed, FUN = function(x){length(meta(x)[["topics_cat"]]) > 0})
wanted <- tm_filter(wanted, FUN = function(x){all(as.list(meta(x)[["topics_cat"]]) %in% wantedTopics)})
wanted <- tm_filter(wanted, FUN = function(x){meta(x)[["lewissplit"]] %in% c("TRAIN", "TEST")})
dataframe <- data.frame(text=unlist(sapply(wanted, `[`, "content")),
earn=as.factor(unlist(sapply(wanted, FUN = function(x){("earn" %in% meta(x)[["topics_cat"]]) * 1}))),
acq=as.factor(unlist(sapply(wanted, FUN = function(x){("acq" %in% meta(x)[["topics_cat"]]) * 1}))),
moneyfx=as.factor(unlist(sapply(wanted, FUN = function(x){"money-fx" %in% meta(x)[["topics_cat"]] * 1}))),
crude=as.factor(unlist(sapply(wanted, FUN = function(x){"crude" %in% meta(x)[["topics_cat"]] * 1}))),
#grain=unlist(sapply(wanted, FUN = function(x){"grain" %in% meta(x)[["topics_cat"]]})),
#trade=unlist(sapply(wanted, FUN = function(x){"trade" %in% meta(x)[["topics_cat"]]})),
#interest=unlist(sapply(wanted, FUN = function(x){"interest" %in% meta(x)[["topics_cat"]]})),
#wheat=unlist(sapply(wanted, FUN = function(x){"wheat" %in% meta(x)[["topics_cat"]]})),
#ship=unlist(sapply(wanted, FUN = function(x){"ship" %in% meta(x)[["topics_cat"]]})),
#corn=unlist(sapply(wanted, FUN = function(x){"corn" %in% meta(x)[["topics_cat"]]})),
train_test=(sapply(wanted, meta, "lewissplit")),
stringsAsFactors=F)
sourceData <- VectorSource(dataframe$text)
corpus <- Corpus(sourceData)
dtm <- DocumentTermMatrix(corpus)
weightedDtm <- weightTfIdf(dtm)
# remove sparse terms
dtm <- removeSparseTerms(dtm, 0.97)
weightedDtm <- removeSparseTerms(weightedDtm, 0.99)
# Document Term Matrix to dataframe conversion
dataframeDtm <- data.frame(as.matrix(dtm))
dataframeWeightedDtm <- data.frame(as.matrix(weightedDtm))
.frame(as.matrix(weightedDtm))
# split to train/test data frames
dataframeDtmTrain <- dataframeDtm[which(dataframe$train_test == "TRAIN"),]
dataframeDtmTest <- dataframeDtm[which(dataframe$train_test == "TEST"),]
dataframeWeightedDtmTrain <- dataframeWeightedDtm[which(dataframe$train_test == "TRAIN"),]
dataframeWeightedDtmTest <- dataframeWeightedDtm[which(dataframe$train_test == "TEST"),]
dataframeDtmTrain$earn <- dataframe$earn[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$earn <- dataframe$earn[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$earn <- dataframe$earn[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$earn <- dataframe$earn[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$acq <- dataframe$acq[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$acq <- dataframe$acq[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$acq <- dataframe$acq[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$acq <- dataframe$acq[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$moneyfx <- dataframe$moneyfx[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$moneyfx <- dataframe$moneyfx[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$moneyfx <- dataframe$moneyfx[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$moneyfx <- dataframe$moneyfx[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain <- dataframeWeightedDtmTrain[1:2000,]
dataframeWeightedDtmTest <- dataframeWeightedDtmTest[1:800,]
dataframeDtmTrain <- dataframeDtmTrain[1:200,]
dataframeDtmTest <- dataframeDtmTest[1:80,]
knnTfMoneyfx <- train(moneyfx ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
#KNN
ctrl <- trainControl(method="repeatedcv", number = 10, repeats = 3)
knnTfMoneyfx <- train(moneyfx ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
#KNN
ctrl <- trainControl(method="repeatedcv", number = 10, repeats = 3)
knnTfMoneyfx <- train(moneyfx ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTfAcq <- train(acq ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTfMoneyfx <- train(moneyfx ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnPredictMoneyfx <- predict(knnTfMoneyfx, newdata = dataframeDtmTest)
knnPredictMoneyfx
knnTfMoneyfx
load("2.RData")
wantedTopics <- list("earn", "acq", "money-fx", "crude", "grain", "trade", "interest", "wheat", "ship", "corn")
wanted <- tm_filter(vcProcessed, FUN = function(x){length(meta(x)[["topics_cat"]]) > 0})
wanted <- tm_filter(wanted, FUN = function(x){all(as.list(meta(x)[["topics_cat"]]) %in% wantedTopics)})
wanted <- tm_filter(wanted, FUN = function(x){meta(x)[["lewissplit"]] %in% c("TRAIN", "TEST")})
dataframe <- data.frame(text=unlist(sapply(wanted, `[`, "content")),
earn=as.factor(unlist(sapply(wanted, FUN = function(x){("earn" %in% meta(x)[["topics_cat"]]) * 1}))),
acq=as.factor(unlist(sapply(wanted, FUN = function(x){("acq" %in% meta(x)[["topics_cat"]]) * 1}))),
moneyfx=as.factor(unlist(sapply(wanted, FUN = function(x){"money-fx" %in% meta(x)[["topics_cat"]] * 1}))),
crude=as.factor(unlist(sapply(wanted, FUN = function(x){"crude" %in% meta(x)[["topics_cat"]] * 1}))),
grain=as.factor(unlist(sapply(wanted, FUN = function(x){"grain" %in% meta(x)[["topics_cat"]] * 1}))),
trade=as.factor(unlist(sapply(wanted, FUN = function(x){"trade" %in% meta(x)[["topics_cat"]] * 1}))),
interest=as.factor(unlist(sapply(wanted, FUN = function(x){"interest" %in% meta(x)[["topics_cat"]] * 1}))),
wheat=as.factor(unlist(sapply(wanted, FUN = function(x){"wheat" %in% meta(x)[["topics_cat"]] * 1}))),
ship=as.factor(unlist(sapply(wanted, FUN = function(x){"ship" %in% meta(x)[["topics_cat"]] * 1}))),
corn=as.factor(unlist(sapply(wanted, FUN = function(x){"corn" %in% meta(x)[["topics_cat"]] * 1}))),
train_test=(sapply(wanted, meta, "lewissplit")),
stringsAsFactors=F)
sourceData <- VectorSource(dataframe$text)
corpus <- Corpus(sourceData)
dtm <- DocumentTermMatrix(corpus)
weightedDtm <- weightTfIdf(dtm)
# remove sparse terms
dtm <- removeSparseTerms(dtm, 0.97)
weightedDtm <- removeSparseTerms(weightedDtm, 0.99)
# Document Term Matrix to dataframe conversion
dataframeDtm <- data.frame(as.matrix(dtm))
dataframeWeightedDtm <- data.frame(as.matrix(weightedDtm))
dataframeDtmTrain <- dataframeDtm[which(dataframe$train_test == "TRAIN"),]
dataframeDtmTest <- dataframeDtm[which(dataframe$train_test == "TEST"),]
dataframeWeightedDtmTrain <- dataframeWeightedDtm[which(dataframe$train_test == "TRAIN"),]
dataframeWeightedDtmTest <- dataframeWeightedDtm[which(dataframe$train_test == "TEST"),]
load("2.RData")
wantedTopics <- list("earn", "acq", "money-fx", "crude", "grain", "trade", "interest", "wheat", "ship", "corn")
wanted <- tm_filter(vcProcessed, FUN = function(x){length(meta(x)[["topics_cat"]]) > 0})
wanted <- tm_filter(wanted, FUN = function(x){all(as.list(meta(x)[["topics_cat"]]) %in% wantedTopics)})
wanted <- tm_filter(wanted, FUN = function(x){meta(x)[["lewissplit"]] %in% c("TRAIN", "TEST")})
dataframe <- data.frame(text=unlist(sapply(wanted, `[`, "content")),
earn=as.factor(unlist(sapply(wanted, FUN = function(x){("earn" %in% meta(x)[["topics_cat"]]) * 1}))),
acq=as.factor(unlist(sapply(wanted, FUN = function(x){("acq" %in% meta(x)[["topics_cat"]]) * 1}))),
moneyfx=as.factor(unlist(sapply(wanted, FUN = function(x){"money-fx" %in% meta(x)[["topics_cat"]] * 1}))),
crude=as.factor(unlist(sapply(wanted, FUN = function(x){"crude" %in% meta(x)[["topics_cat"]] * 1}))),
grain=as.factor(unlist(sapply(wanted, FUN = function(x){"grain" %in% meta(x)[["topics_cat"]] * 1}))),
trade=as.factor(unlist(sapply(wanted, FUN = function(x){"trade" %in% meta(x)[["topics_cat"]] * 1}))),
interest=as.factor(unlist(sapply(wanted, FUN = function(x){"interest" %in% meta(x)[["topics_cat"]] * 1}))),
wheat=as.factor(unlist(sapply(wanted, FUN = function(x){"wheat" %in% meta(x)[["topics_cat"]] * 1}))),
ship=as.factor(unlist(sapply(wanted, FUN = function(x){"ship" %in% meta(x)[["topics_cat"]] * 1}))),
corn=as.factor(unlist(sapply(wanted, FUN = function(x){"corn" %in% meta(x)[["topics_cat"]] * 1}))),
train_test=(sapply(wanted, meta, "lewissplit")),
stringsAsFactors=F)
sourceData <- VectorSource(dataframe$text)
corpus <- Corpus(sourceData)
dtm <- DocumentTermMatrix(corpus)
weightedDtm <- weightTfIdf(dtm)
# remove sparse terms
dtm <- removeSparseTerms(dtm, 0.97)
weightedDtm <- removeSparseTerms(weightedDtm, 0.99)
# Document Term Matrix to dataframe conversion
dataframeDtm <- data.frame(as.matrix(dtm))
dataframeWeightedDtm <- data.frame(as.matrix(weightedDtm))
dataframeDtmTrain <- dataframeDtm[which(dataframe$train_test == "TRAIN"),]
dataframeDtmTest <- dataframeDtm[which(dataframe$train_test == "TEST"),]
dataframeWeightedDtmTrain <- dataframeWeightedDtm[which(dataframe$train_test == "TRAIN"),]
dataframeWeightedDtmTest <- dataframeWeightedDtm[which(dataframe$train_test == "TEST"),]
dataframeDtmTrain$topic <- dataframe$topic[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$topic <- dataframe$topic[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$topic <- dataframe$topic[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$topic <- dataframe$topic[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$earn <- dataframe$earn[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$earn <- dataframe$earn[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$earn <- dataframe$earn[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$earn <- dataframe$earn[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$acq <- dataframe$acq[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$acq <- dataframe$acq[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$acq <- dataframe$acq[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$acq <- dataframe$acq[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$moneyfx <- dataframe$moneyfx[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$moneyfx <- dataframe$moneyfx[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$moneyfx <- dataframe$moneyfx[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$moneyfx <- dataframe$moneyfx[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$crude <- dataframe$crude[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$crude <- dataframe$crude[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$crude <- dataframe$crude[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$crude <- dataframe$crude[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$grain <- dataframe$grain[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$grain <- dataframe$grain[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$grain <- dataframe$grain[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$grain <- dataframe$grain[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$trade <- dataframe$trade[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$trade <- dataframe$trade[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$trade <- dataframe$trade[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$trade <- dataframe$trade[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$interest <- dataframe$interest[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$interest <- dataframe$interest[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$interest <- dataframe$interest[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$interest <- dataframe$interest[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$wheat <- dataframe$wheat[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$wheat <- dataframe$wheat[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$wheat <- dataframe$wheat[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$wheat <- dataframe$wheat[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$ship <- dataframe$ship[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$ship <- dataframe$ship[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$ship <- dataframe$ship[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$ship <- dataframe$ship[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$corn <- dataframe$corn[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$corn <- dataframe$corn[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$corn <- dataframe$corn[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$corn <- dataframe$corn[which(dataframe$train_test == "TEST")]
head(dataframeDtmTrain)
dataframeWeightedDtmTrain <- dataframeWeightedDtmTrain[1:2000,]
dataframeWeightedDtmTest <- dataframeWeightedDtmTest[1:800,]
dataframeDtmTrain <- dataframeDtmTrain[1:200,]
dataframeDtmTest <- dataframeDtmTest[1:80,]
#KNN
ctrl <- trainControl(method="repeatedcv", number = 10, repeats = 3)
knnTfCrude <- train(crude ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnPredictCrude <- predict(knnTfCrude, newdata = dataframeDtmTest)
knnTfCrude
load("2.RData")
wantedTopics <- list("earn", "acq", "money-fx", "crude", "grain", "trade", "interest", "wheat", "ship", "corn")
wanted <- tm_filter(vcProcessed, FUN = function(x){length(meta(x)[["topics_cat"]]) > 0})
wanted <- tm_filter(wanted, FUN = function(x){all(as.list(meta(x)[["topics_cat"]]) %in% wantedTopics)})
wanted <- tm_filter(wanted, FUN = function(x){meta(x)[["lewissplit"]] %in% c("TRAIN", "TEST")})
dataframe <- data.frame(text=unlist(sapply(wanted, `[`, "content")),
earn=as.factor(unlist(sapply(wanted, FUN = function(x){("earn" %in% meta(x)[["topics_cat"]]) * 1}))),
acq=as.factor(unlist(sapply(wanted, FUN = function(x){("acq" %in% meta(x)[["topics_cat"]]) * 1}))),
moneyfx=as.factor(unlist(sapply(wanted, FUN = function(x){"money-fx" %in% meta(x)[["topics_cat"]] * 1}))),
crude=as.factor(unlist(sapply(wanted, FUN = function(x){"crude" %in% meta(x)[["topics_cat"]] * 1}))),
grain=as.factor(unlist(sapply(wanted, FUN = function(x){"grain" %in% meta(x)[["topics_cat"]] * 1}))),
trade=as.factor(unlist(sapply(wanted, FUN = function(x){"trade" %in% meta(x)[["topics_cat"]] * 1}))),
interest=as.factor(unlist(sapply(wanted, FUN = function(x){"interest" %in% meta(x)[["topics_cat"]] * 1}))),
wheat=as.factor(unlist(sapply(wanted, FUN = function(x){"wheat" %in% meta(x)[["topics_cat"]] * 1}))),
ship=as.factor(unlist(sapply(wanted, FUN = function(x){"ship" %in% meta(x)[["topics_cat"]] * 1}))),
corn=as.factor(unlist(sapply(wanted, FUN = function(x){"corn" %in% meta(x)[["topics_cat"]] * 1}))),
train_test=(sapply(wanted, meta, "lewissplit")),
stringsAsFactors=F)
sourceData <- VectorSource(dataframe$text)
corpus <- Corpus(sourceData)
dtm <- DocumentTermMatrix(corpus)
weightedDtm <- weightTfIdf(dtm)
# remove sparse terms
dtm <- removeSparseTerms(dtm, 0.97)
weightedDtm <- removeSparseTerms(weightedDtm, 0.99)
# Document Term Matrix to dataframe conversion
dataframeDtm <- data.frame(as.matrix(dtm))
dataframeWeightedDtm <- data.frame(as.matrix(weightedDtm))
dataframeDtmTrain <- dataframeDtm[which(dataframe$train_test == "TRAIN"),]
dataframeDtmTest <- dataframeDtm[which(dataframe$train_test == "TEST"),]
dataframeWeightedDtmTrain <- dataframeWeightedDtm[which(dataframe$train_test == "TRAIN"),]
dataframeWeightedDtmTest <- dataframeWeightedDtm[which(dataframe$train_test == "TEST"),]
# set topic column for data frames
dataframeDtmTrain$topic <- dataframe$topic[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$topic <- dataframe$topic[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$topic <- dataframe$topic[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$topic <- dataframe$topic[which(dataframe$train_test == "TEST")]
# set 10 topic columns
dataframeDtmTrain$earn <- dataframe$earn[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$earn <- dataframe$earn[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$earn <- dataframe$earn[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$earn <- dataframe$earn[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$acq <- dataframe$acq[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$acq <- dataframe$acq[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$acq <- dataframe$acq[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$acq <- dataframe$acq[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$moneyfx <- dataframe$moneyfx[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$moneyfx <- dataframe$moneyfx[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$moneyfx <- dataframe$moneyfx[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$moneyfx <- dataframe$moneyfx[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$crude <- dataframe$crude[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$crude <- dataframe$crude[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$crude <- dataframe$crude[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$crude <- dataframe$crude[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$grain <- dataframe$grain[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$grain <- dataframe$grain[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$grain <- dataframe$grain[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$grain <- dataframe$grain[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$trade <- dataframe$trade[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$trade <- dataframe$trade[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$trade <- dataframe$trade[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$trade <- dataframe$trade[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$interest <- dataframe$interest[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$interest <- dataframe$interest[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$interest <- dataframe$interest[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$interest <- dataframe$interest[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$wheat <- dataframe$wheat[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$wheat <- dataframe$wheat[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$wheat <- dataframe$wheat[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$wheat <- dataframe$wheat[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$ship <- dataframe$ship[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$ship <- dataframe$ship[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$ship <- dataframe$ship[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$ship <- dataframe$ship[which(dataframe$train_test == "TEST")]
dataframeDtmTrain$corn <- dataframe$corn[which(dataframe$train_test == "TRAIN")]
dataframeDtmTest$corn <- dataframe$corn[which(dataframe$train_test == "TEST")]
dataframeWeightedDtmTrain$corn <- dataframe$corn[which(dataframe$train_test == "TRAIN")]
dataframeWeightedDtmTest$corn <- dataframe$corn[which(dataframe$train_test == "TEST")]
# select subset of dataframes
dataframeWeightedDtmTrain <- dataframeWeightedDtmTrain[1:2000,]
dataframeWeightedDtmTest <- dataframeWeightedDtmTest[1:800,]
dataframeDtmTrain <- dataframeDtmTrain[1:200,]
dataframeDtmTest <- dataframeDtmTest[1:80,]
#KNN
ctrl <- trainControl(method="repeatedcv", number = 10, repeats = 3)
knnTfEarn <- train(earn ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTfAcq <- train(acq ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTfMoneyfx <- train(moneyfx ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTfCrude <- train(crude ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTfGrain <- train(grain ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTfTrade <- train(trade ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTfInterest <- train(interest ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTfWheat <- train(wheat ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTfShip <- train(ship ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTfCorn <- train(corn ~ ., data = dataframeDtmTrain, method = "knn", trControl = ctrl)
knnTfidfEarn <- train(earn ~ ., data = dataframeWeightedDtmTrain, method = "knn", trControl = ctrl)
knnTfPredictEarn <- predict(knnTfEarn, newdata = dataframeDtmTest)
knnTfPredictAcq <- predict(knnTfAcq, newdata = dataframeDtmTest)
knnTfPredictMoneyfx <- predict(knnTfMoneyfx, newdata = dataframeDtmTest)
knnTfPredictCrude <- predict(knnTfCrude, newdata = dataframeDtmTest)
knnTfPredictGrain <- predict(knnTfGrain, newdata = dataframeDtmTest)
knnTfPredictTrade <- predict(knnTfTrade, newdata = dataframeDtmTest)
knnTfPredictInterest <- predict(knnTfInterest, newdata = dataframeDtmTest)
knnTfPredictWheat <- predict(knnTfWheat, newdata = dataframeDtmTest)
knnTfPredictShip <- predict(knnTfShip, newdata = dataframeDtmTest)
knnTfPredictCorn <- predict(knnTfCorn, newdata = dataframeDtmTest)
knnTfEarn
knnTfAcq
knnTfMoneyfx
knnTfCrude
knnTfGrain
knnTfTrade
knnTfInterest
knnTfWheat
knnTfShip
knnTfCorn
